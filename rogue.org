#+TITLE: Rogue-Like Game in C++17
#+AUTHOR: Neel Raiyani
#+EMAIL: nraiyani at gmail dot com
#+LANGUAGE: en
#+SETUPFILE: notes-style.org
#+OPTIONS: H:3, toc:1, \n:t
#+EXPORT_FILE_NAME: docs\index.html

This file documents my attempts at going through a process of making a Rogue-Like game.
The associated source code lives in [[https://github.com/Roy-Fokker/roguelike][GitHub Repo]].

It's written in sort of literal programming format. Documentation is written in Emacs Org-Mode and exported to html which used by github to display this page. As emacs is not being used for any code related purposes, rest of this document ignores this aspect.

* Setup
** Environment Setup
*** Tools of the trade:
	Below is listing of tools I am using
	|---------------------+------------------------------+---------|
	| Tool                | Name                         | Version |
	|---------------------+------------------------------+---------|
	| Editor              | [[https://code.visualstudio.com/][VSCode]]                       |  1.38.1 |
	| C++ Toolchain       | [[https://visualstudio.microsoft.com/vs/][Visual Studio 2019 Community]] |  16.3.2 |
	| C++ Build Generator | [[https://cmake.org/][CMake]]                        |  3.15.1 |
	| C++ Package Manager | [[https://github.com/Microsoft/vcpkg][vcpkg]]                        | 2019.09 |
	| Version Control     | [[https://git-scm.com/][git]]                          |  2.23.0 |
	|---------------------+------------------------------+---------|

*** Editor Configuration
 	Following extensions are installed in VSCode
	- [[https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2][Bracket Pair Colorizer 2]]
	- [[https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools][C/C++]]
	- [[https://marketplace.visualstudio.com/items?itemName=maddouri.cmake-tools-helper][CMake Tools Helper]]
	  This will installed 2 other extensions
	  - [[https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools][CMake Tools]]
	  - [[https://marketplace.visualstudio.com/items?itemName=twxs.cmake][CMake for Visual Studio Code]]

*** vcpkg configuration
	- Add Environment Variable called VCPKG_ROOT and point it to location of your vcpkg installation directory.
	  For me this is 'D:\Projects\CPP\.packages\vcpkg'.
	- Add Environment Variable called VCPKG_DEFAULT_TRIPLET and set it equal to x64-<system name>.
	  Again for me this is 'x64-Windows'.

** Project Setup
*** Folder Structure
	#+begin_example markdown
	  \          # Root folder
	  \build\    # where cmake will put all build generated files
	  \docs\     # documentation folder, where this index.html file is located
	  \src\      # where all the source files will go
	  \external\ # any 3rd party libraries we can't get via vcpkg will go here
	#+end_example
*** ~\.gitignore~ file
	We'll be ignore following files and folders. No point in adding these to our git repo.
    #+begin_src markdown -n 
	  # cmake build directory
	  build/

	  # vscode and visual studio specific
	  .vscode/
	  .vs/

	  # org-mode temp files
	  ./*.html
	  backups/
    #+end_src
*** CMake configuration
	After you create the CMakeList.txt file below, VSCode should recognize this folder as being CMake project.
	It will ask you to choose the toolchain with which to envoke the build process.
   
	- ~\CMakeLists.txt~
	  This in the root of our project. We define basic things about how cmake should do things.
	  Lines 3 to 6 tell cmake to use vcpkg toolchain file.
	  #+begin_src cmake -n
		cmake_minimum_required(VERSION 3.15.0)

		if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
		  set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
			  CACHE STRING "")
		endif()

		project(rogue
				LANGUAGES CXX 
				VERSION 0.1.0)

		set(CMAKE_CXX_STANDARD_REQUIRED ON)
		set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin/")

		add_subdirectory(src)

	  #+end_src
	- ~\src\CMakeLists.txt~
	  This is in our src directory, here we tell cmake that we want output executable to be named rogue.exe.
	  We also tell it we want to use C++17 standard. This doesn't actually work with MSVC.
	  So... we have to explictly tell cmake to pass some parameters to MSVC compiler
	  #+begin_src cmake -n
		find_package(fmt REQUIRED)

		add_executable(rogue main.cpp)

		target_compile_features(rogue PRIVATE cxx_std_17)

		target_compile_options(rogue
							   PRIVATE 
							   $<$<CXX_COMPILER_ID:MSVC>:/W3 /permissive- /Zc:__cplusplus /std:c++17>)

		target_compile_definitions(rogue
								   PRIVATE
								   $<$<CONFIG:Debug>:DEBUG _DEBUG>)

		target_link_libraries(rogue PRIVATE fmt::fmt)
	  #+end_src
*** Hello World test file
	Time to test if the Setup is done properly.
	Let's create ~\src\main.cpp~ file 
    #+begin_src cpp -n
	  #include <iostream>
	  #include <fmt/core.h>
	  #include <chrono>
	  #include <string>

	  int main()
	  {
		  auto tp = std::chrono::system_clock::now();
		  auto now_c = std::chrono::system_clock::to_time_t(tp);
		  fmt::print("Hello, World! {}", now_c);
	  }
	#+end_src

	If you tried to build the project now you'll find that cmake can't find ~fmt~ library.
	So we need to get vcpkg to download this libary.
	#+begin_src bat -n
	  vcpkg install fmt
	#+end_src
	After vcpkg completes downloading and building ~fmt~ we can get vscode to run the build command.

	If all of the above is done properly the file below should compile and generate an executable.
	It can be executed by calling ~\build\src\rogue.exe~ from the project root folder.

* Drawing Player and Moving around
  The above Setup section looks like a lot of work just to get "Hello, World" printed on to console. We could have avoided all of that hassle by not using cmake. But I want to learn cmake, so...
  From here on out, we are going to focus on our rogue game.
  
  I am closely following the tutorials presented at [[http://www.rogueliketutorials.com/tutorials/tcod/][Roguelike Tutorials]] and the variant [[https://tomassedovic.github.io/roguelike-tutorial/index.html][Roguelike Tutorials in Rust]]. We will be using the same library that it is using. Except instead of Python, we'll be in C++.
  However, given that we are going to use C++, there is a some setup overhead involved. Specifically, to get ~libtcod~ working and linking with our game.

** LibTCOD
   We have two options here. 
   - Get the source code and build the library ourselves.
   - Download pre-built package, and use those. 
   Place to go for either option is [[https://github.com/libtcod/libtcod][libtcod github repo]]
   
   I am going to go with pre-built version. Author of libtcod uses VS2015, which is ABI compatible with our VS2019 setup. So everything should just work. :fingers-crossed:
   Having downloaded [[https://github.com/libtcod/libtcod/releases/download/1.14.0/libtcod-1.14.0-x86_64-msvc.zip][libtcod 1.14 x64]]. Now we have to tell cmake where to go to find this library.
   I've extracted the contents of the zip file into ~\external\libtcod-1.14.0-x86_64-msvc~ folder. I've also added the folder to our gitignore list. We don't need everything in the archive only some parts.
   #+begin_src markdown -n 12
	 # the prebuilt libtcod files
	 external/libtcod-1.14.0-x86_64-msvc/
   #+end_src
   
   Now we create a ~external\CMakeLists.txt~ file, this will tell cmake to let us consume this library from our code.
   We also put in a custom target, so that cmake will copy the .dll files into same directory as our executable.
   #+name: external/CMakeLists.txt
   #+begin_src cmake -n
	 # Add directories for libtcod
	 set(LIBTCOD_DIR "${CMAKE_CURRENT_SOURCE_DIR}/libtcod-1.14.0-x86_64-msvc")

	 set(LIBTCOD_INCLUDE "${LIBTCOD_DIR}/include/" CACHE PATH "Path to Libtcod Include")
	 find_library(LIBTCOD_LIB libtcod ${LIBTCOD_DIR})

	 add_custom_target(libtcod_bins
		 COMMAND ${CMAKE_COMMAND} -E copy ${LIBTCOD_DIR}/libtcod.dll ${EXECUTABLE_OUTPUT_PATH}
		 COMMAND ${CMAKE_COMMAND} -E copy ${LIBTCOD_DIR}/sdl2.dll ${EXECUTABLE_OUTPUT_PATH}
	 )
   #+end_src
   
   Modify our root ~CMakeLists.txt~, by adding ~add_subdirectory(external)~ to line before ~src~ directory is added.
   #+name: \CMakeLists.txt
   #+begin_src cmake -n 15
	 add_subdirectory(external)
	 add_subdirectory(src)
   #+end_src

   Next, now we need to tell ~src\CMakeLists.txt~ to consume =libtcod=.
   #+name: src\CMakeLists.txt
   #+begin_src cmake -n 17
	 target_include_directories(rogue PRIVATE ${LIBTCOD_INCLUDE})

	 target_link_libraries(rogue PRIVATE fmt::fmt ${LIBTCOD_LIB})

	 add_dependencies(rogue libtcod_bins)
   #+end_src

   Finally, we can modify our ~main.cpp~ to actually call libtcod
   #+name: main.cpp
   #+begin_src cpp -n
	 #include <libtcod.hpp>

	 int main()
	 {
		 TCODConsole::initRoot(80,50,"libtcod C++ tutorial",false, TCOD_RENDERER_SDL2);
		while ( !TCODConsole::isWindowClosed() ) {
			TCOD_key_t key;
			TCODSystem::checkForEvent(TCOD_EVENT_KEY_PRESS,&key,NULL);
			TCODConsole::root->clear();
			TCODConsole::root->putChar(40,25,'@');
			TCODConsole::flush();
		}
		return 0;
	 }
   #+end_src
   

* Entity System

* Generating a Dungeon

* Field of View

* Placing Enemies

* Combat Loop

* User Interface

* Items and Inventory

* Equiping Items

* Weapons and Targetting

* Saving and Loading Game State

* Dungeon Delving

* Difficulty Curve

